generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * * ENUMS **
 */
enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
  BLOCKED
}

enum AuthProviderType {
  GOOGLE
  CREDENTIALS
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
  SUPER_ADMIN
}

enum ExamType {
  IELTS
  PTE
}

enum ModuleType {
  SPEAKING
  WRITING
  READING
  LISTENING
}

enum QuestionType {
  // IELTS/PTE Shared
  MCQ_SINGLE
  MCQ_MULTIPLE
  FILL_BLANK_DROPDOWN
  FILL_BLANK_DRAG_DROP
  REORDER_PARAGRAPHS
  HIGHLIGHT_INCORRECT
  SUMMARIZE_SPOKEN_TEXT
  SELECT_MISSING_WORD
  WRITE_FROM_DICTATION
  SUMMARIZE_WRITTEN_TEXT
  WRITE_ESSAY
  READ_ALOUD
  REPEAT_SENTENCE
  DESCRIBE_IMAGE
  RE_TELL_LECTURE
  ANSWER_SHORT_QUESTION
  HIGHLIGHT_CORRECT_SUMMARY
}

enum AttemptStatus {
  IN_PROGRESS
  SUBMITTED
  COMPLETED
  ABORTED
}

enum JobStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}

/**
 * * MULTI-TENANT ORGANIZATION **
 */
model Organization {
  id        String     @id @default(uuid())
  name      String
  slug      String     @unique
  domain    String?
  isActive  Boolean    @default(true)
  adminId   String // Created/managed by Admin (ADMIN/SUPER_ADMIN)
  admin     Admin      @relation("AdminOrganizations", fields: [adminId], references: [id])
  users     User[]     @relation("OrgUsers")
  batches   Batch[]
  courses   Course[]
  mockTests MockTest[] @relation("OrgMockTests")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("organizations")
}

/**
 * * USER & AUTH **
 */
model User {
  id             String         @id @default(uuid())
  name           String?
  email          String?        @unique
  password       String? // Hashed
  phone          String?
  picture        String?
  status         UserStatus     @default(PENDING)
  userRole       UserRole       @default(STUDENT)
  isDeleted      Boolean        @default(false)
  emailVerified  Boolean        @default(false)
  organizationId String?
  organization   Organization?  @relation("OrgUsers", fields: [organizationId], references: [id])
  authProviders  AuthProvider[]
  student        Student?       @relation("UserStudent")
  teacher        Teacher?       @relation("UserTeacher")
  admin          Admin?         @relation("UserAdmin")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([email])
  @@index([phone])
  @@map("users")
}

model Student {
  id                String                 @id @default(uuid())
  userId            String                 @unique
  user              User                   @relation("UserStudent", fields: [userId], references: [id], onDelete: Cascade)
  targetScore       Float? // e.g., 79 for PTE
  examDate          DateTime? // For countdown
  enrollments       Enrollment[]
  answers           Answer[]
  testAttempts      TestAttempt[]
  subscriptions     Subscription[]
  payments          Payment[]
  notifications     Notification[]
  studentBatches    StudentBatch[]
  studyPlanEvents   StudyPlanEvent[]
  tasks             Task[]
  dailyPerformances UserDailyPerformance[] @relation("StudentDailyPerformances")
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt

  @@map("students")
}

model Teacher {
  id             String   @id @default(uuid())
  userId         String   @unique
  user           User     @relation("UserTeacher", fields: [userId], references: [id], onDelete: Cascade)
  createdCourses Course[] @relation("TeacherCreatedCourses")
  teacherBatches Batch[]  @relation("TeacherBatches")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("teachers")
}

model Admin {
  id                   String         @id @default(uuid())
  userId               String         @unique
  user                 User           @relation("UserAdmin", fields: [userId], references: [id], onDelete: Cascade)
  organizationsCreated Organization[] @relation("AdminOrganizations")
  createdBatches       Batch[]
  createdMockTests     MockTest[]
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  Course               Course[]

  @@map("admins")
}

model AuthProvider {
  id         String           @id @default(uuid())
  provider   AuthProviderType
  providerId String
  userId     String
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@map("auth_providers")
}

/**
 * * BATCHES (For Student-Teacher Assignment & Batch Analytics) **
 */
model Batch {
  id             String         @id @default(uuid())
  organizationId String
  organization   Organization   @relation(fields: [organizationId], references: [id])
  name           String
  description    String?
  teacherId      String? // Assigned teacher
  teacher        Teacher?       @relation("TeacherBatches", fields: [teacherId], references: [id])
  adminId        String? // Created by admin
  admin          Admin?         @relation(fields: [adminId], references: [id])
  startDate      DateTime?
  endDate        DateTime?
  studentBatches StudentBatch[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@map("batches")
}

model StudentBatch {
  id        String  @id @default(uuid())
  batchId   String
  studentId String
  batch     Batch   @relation(fields: [batchId], references: [id], onDelete: Cascade)
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([batchId, studentId])
  @@map("student_batches")
}

/**
 * * COURSES & MODULES **
 */

model Course {
  id              String           @id @default(uuid())
  organizationId  String?
  organization    Organization?    @relation(fields: [organizationId], references: [id])
  title           String
  slug            String           @unique
  description     String
  price           Int              @default(0)
  examType        ExamType // IELTS or PTE
  thumbnail       String?
  metadata        Json?
  visibility      Boolean          @default(false)
  featured        Boolean          @default(false)
  teacherId       String? // Created by teacher
  teacher         Teacher?         @relation("TeacherCreatedCourses", fields: [teacherId], references: [id])
  adminId         String? // Created by admin
  admin           Admin?           @relation(fields: [adminId], references: [id])
  isDeleted       Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  modules         CourseModule[]
  enrollments     Enrollment[]
  practiceModules PracticeModule[]

  @@map("courses")
}

model CourseModule {
  id          String     @id @default(uuid())
  courseId    String
  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title       String
  description String?
  order       Int
  moduleType  ModuleType
  metadata    Json?
  isDeleted   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([courseId, order])
  @@map("course_modules")
}

/**
 * * ENROLLMENTS **
 */
model Enrollment {
  id        String   @id @default(uuid())
  studentId String
  courseId  String
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, courseId])
  @@map("enrollments")
}

/**
 * * PRACTICE MODULES & QUESTIONS **
 */
model PracticeModule {
  id         String     @id @default(uuid())
  courseId   String
  course     Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title      String
  examType   ExamType
  moduleType ModuleType
  metadata   Json? // e.g., {subsections: ["Read Aloud", ...]}
  isDeleted  Boolean    @default(false)
  questions  Question[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@map("practice_modules")
}

model Question {
  id                String             @id @default(uuid())
  title             String?
  text              String
  examType          ExamType
  moduleType        ModuleType
  questionType      QuestionType
  options           Json? // e.g., [{id:1, label:"Option A", isCorrect:true}]
  correctAnswer     Json? // Type-specific (e.g., array for MCQ, text for essay)
  media             Json? // {audioUrl: "s3://...", imageUrl: "..."}
  difficulty        Int? // 1-5
  timeLimitSec      Int? // Per-question timer
  practiceModuleId  String?
  practiceModule    PracticeModule?    @relation(fields: [practiceModuleId], references: [id], onDelete: Cascade)
  mockTestQuestions MockTestQuestion[]
  answers           Answer[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  isDeleted         Boolean            @default(false)

  @@index([examType])
  @@index([moduleType])
  @@map("questions")
}

/**
 * * MOCK TESTS **
 */
model MockTest {
  id             String             @id @default(uuid())
  organizationId String?
  organization   Organization?      @relation("OrgMockTests", fields: [organizationId], references: [id])
  title          String
  examType       ExamType
  durationMin    Int // Total timer
  instructions   String? // e.g., "No pausing allowed"
  questions      MockTestQuestion[]
  testAttempts   TestAttempt[]      @relation("MockTestAttempts")
  adminId        String? // Created by admin
  admin          Admin?             @relation(fields: [adminId], references: [id])
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@map("mock_tests")
}

model MockTestQuestion {
  id         String   @id @default(uuid())
  mockTestId String
  mockTest   MockTest @relation(fields: [mockTestId], references: [id], onDelete: Cascade)
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  order      Int

  @@unique([mockTestId, order])
  @@map("mock_test_questions")
}

/**
 * * ATTEMPTS & ANSWERS **
 */
model TestAttempt {
  id          String        @id @default(uuid())
  studentId   String
  mockTestId  String
  status      AttemptStatus @default(IN_PROGRESS)
  startedAt   DateTime      @default(now())
  completedAt DateTime?
  durationSec Int? // Actual time taken
  totalScore  Float? // Overall band/score
  resultJson  Json? // Full results snapshot
  student     Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  mockTest    MockTest      @relation("MockTestAttempts", fields: [mockTestId], references: [id], onDelete: Cascade)
  answers     Answer[]      @relation("TestAttemptAnswers")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([studentId])
  @@index([mockTestId])
  @@index([status])
  @@map("test_attempts")
}

model Answer {
  id           String       @id @default(uuid())
  questionId   String
  question     Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  studentId    String
  student      Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  attemptId    String?
  attempt      TestAttempt? @relation("TestAttemptAnswers", fields: [attemptId], references: [id], onDelete: Cascade)
  responseText String? // Textual (e.g., essay)
  responseJson Json? // Structured (e.g., selected options array)
  audioUrl     String? // S3 for Speaking recordings
  transcript   String? // ASR output
  aiScores     Json? // {pronunciation: 7.5, fluency: 8.0, grammar: 6.5, total: 7.5}
  humanScore   Float? // Manual override
  isCorrect    Boolean?
  needsReview  Boolean      @default(false)
  feedback     Json? // {tips: ["Improve pauses"], scoreBreakdown: {...}}
  status       String       @default("PENDING") // PENDING, PROCESSING, SCORED
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  scoringJobs  ScoringJob[] @relation("AnswerScoringJobs")

  @@index([studentId])
  @@index([questionId])
  @@index([attemptId])
  @@map("answers")
}

/**
 * * BACKGROUND JOBS (For AI Scoring/ASR) **
 */
model ScoringJob {
  id        String    @id @default(uuid())
  answerId  String
  jobType   String // ASR, AI_SCORE_SPEAKING, AI_SCORE_WRITING
  status    JobStatus @default(PENDING)
  attempts  Int       @default(0)
  error     String?
  result    Json? // Raw AI response
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  answer    Answer    @relation("AnswerScoringJobs", fields: [answerId], references: [id], onDelete: Cascade)

  @@index([answerId])
  @@index([status])
  @@map("scoring_jobs")
}

/**
 * * PAYMENTS & SUBSCRIPTIONS **
 */
model Plan {
  id            String         @id @default(uuid())
  name          String
  slug          String         @unique
  price         Int // BDT
  durationDays  Int
  features      Json? // e.g., {mockTests: 10, aiScoring: true}
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]

  @@map("plans")
}

model Subscription {
  id        String             @id @default(uuid())
  studentId String
  planId    String
  startsAt  DateTime
  endsAt    DateTime
  status    SubscriptionStatus @default(ACTIVE)
  metadata  Json?
  student   Student            @relation(fields: [studentId], references: [id], onDelete: Cascade)
  plan      Plan               @relation(fields: [planId], references: [id], onDelete: Cascade)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@index([studentId])
  @@map("subscriptions")
}

model Payment {
  id                String        @id @default(uuid())
  studentId         String
  amount            Int // BDT
  currency          String        @default("BDT")
  provider          String // bKash, Nagad, SSLCommerz
  providerPaymentId String? // External ID
  status            PaymentStatus @default(PENDING)
  metadata          Json? // {invoice: "..."}
  student           Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@index([studentId])
  @@index([providerPaymentId])
  @@map("payments")
}

/**
 * * NOTIFICATIONS & TASKS/CALENDAR **
 */
model Notification {
  id        String    @id @default(uuid())
  studentId String
  type      String // e.g., TASK_DUE, SCORE_READY
  channel   String // EMAIL, SMS, PUSH
  payload   Json
  isRead    Boolean   @default(false)
  sentAt    DateTime?
  student   Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())

  @@index([studentId])
  @@index([isRead])
  @@map("notifications")
}

model StudyPlanEvent {
  id          String   @id @default(uuid())
  studentId   String
  title       String
  description String?
  startAt     DateTime
  endAt       DateTime
  isCompleted Boolean  @default(false)
  metadata    Json? // {moduleType: "SPEAKING"}
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([studentId])
  @@map("study_plan_events")
}

model Task {
  id          String     @id @default(uuid())
  studentId   String
  title       String // e.g., "Practice 5 Read Aloud questions"
  moduleType  ModuleType
  dueDate     DateTime
  isCompleted Boolean    @default(false)
  metadata    Json? // {examType: "PTE", questions: 5}
  student     Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([studentId])
  @@index([dueDate])
  @@map("tasks")
}

/**
 * * ANALYTICS **
 */
model UserDailyPerformance {
  id        String   @id @default(uuid())
  studentId String
  date      DateTime
  metrics   Json // {speaking: {attempts:2, avgScore:7.5, correct:80}, ...}
  createdAt DateTime @default(now())
  student   Student  @relation("StudentDailyPerformances", fields: [studentId], references: [id])

  @@unique([studentId, date])
  @@index([studentId])
  @@map("user_daily_performances")
}
